/*------------------------------------*\
    $FORMS
\*------------------------------------*/
/**
 *
 * Demo: jsfiddle.net/inuitcss/MhHHU
 *
 */
fieldset{
    padding:$base-spacing-unit;
}

/**
 * Text inputs
 *
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 *
 */
.text-input{
    width: 100%;
    height: 150px;
    padding: 1em;
}


/**
 * Group sets of form fields in a list, e.g.:
 *
   <ul class=form-fields>
       <li>
           <label />
           <input />
       </li>
       <li>
           <label />
           <select />
       </li>
       <li>
           <label />
           <input />
       </li>
   </ul>
 *
 */

/**
 * Labels
 *
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 *
   <li>
       <span class=label>Select an option below:</span>
       <ul class="multi-list  four-cols">
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */
label,
.label{
    display:block;
}
    /**
     * Extra help text in `label`s, e.g.:
     *
       <label>Card number <small class=additional>No spaces</small></label>
     *
     */
    .additional{
        display:block;
        font-weight:normal;
    }


/*
 * Groups of checkboxes and radios, e.g.:
 *
   <li>
       <ul class=check-list>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */
.check-list{
    list-style:none;
    margin:0;
}
    /*
     * Labels in check-lists
     */
    .check-label,
    .check-list label,
    .check-list .label{
        display:inline-block;
    }


/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 *
   <li class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </li>
 *
 */
.spoken-form label{
    display:inline-block;
    font:inherit;
}


/**
 * Extra help text displayed after a field when that field is in focus, e.g.:
 *
   <label for=email>Email:</label>
   <input type=email class=text-input id=email>
   <small class=extra-help>.edu emails only</small>
 *
 * We leave the help text in the document flow and merely set it to
 * `visibility:hidden;`. This means that it won’t interfere with anything once
 * it reappears.
 *
 */
/*small*/.extra-help{
    display:inline-block;
    visibility:hidden;
}
.text-input:active + .extra-help,
.text-input:focus + .extra-help{
    visibility:visible;
}

// Placeholders
// ::-webkit-input-placeholder   { color: lighten($text-color, 30%); }
// ::-moz-placeholder            { color: lighten($text-color, 30%); } /* firefox 19+ */
// :-ms-input-placeholder        { color: lighten($text-color, 30%); } /* ie */
// input:-moz-placeholder        { color: lighten($text-color, 30%); }

//---––––––––––––
// NATIVE CSS SELECT
// source code by filament-group
//---––––––––––––
/* These are just demo button-y styles, style as you like */
.button {
  border: 1px solid $brand-color;
  background: $white; /* Old browsers */
  min-height: 2em;
}

/* Container used for styling the custom select, the buttom class adds the bg gradient, corners, etc. */
.dropdown {
  position: relative;
  display:block;
  padding:0;
}

/* This is the native select, we're making everything the text invisible so we can see the button styles in the wrapper */
.dropdown {

  border: 1px solid rgba($white, .75);
  font-family: inherit;
  font-weight: lighter;
  color: $white;

  select {
    width: 100%;
    margin: 0;
    background: none;
    border: 1px solid transparent;
    outline: none;
    /* Magic font size number to prevent iOS text zoom */
    font-size: 16px;
    font-family: inherit;
    font-weight: lighter;
    color: $white;
    line-height: 2em;
    padding: .6em 1.9em .5em .8em;
    /* Remove select styling */
    appearance: none;
    -webkit-appearance: none;

    /* Focus style */
    &::focus {
      outline: none;
      background-color: transparent;
      border: 1px solid $white;
    }

  }

  /* Hover style */
  &:hover       { border: 1px  solid $white; }

  /* Custom arrow sits on top of the select - could be an image, SVG, icon font, etc. or the arrow could just baked into the bg image on the select */
  &::before{
    content:'\f151';
    @extend .ion-ios7-arrow-down;
    @include rposition($type: absolute, $right: 1em, $top: 50%);
    margin-top:-.5em;
    z-index: 2;
    color: $white;
    /* These hacks make the select behind the arrow clickable in some browsers */
    pointer-events:none;
  }

}

 /* This hides native dropdown button arrow in IE 10/11+ so it will have the custom appearance, IE 9 and earlier get a native select */
@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
   .dropdown select::-ms-expand {
    display: none;
  }
  /* Removes the odd blue bg color behind the text in IE 10/11 and sets the text to match the focus style text */
  select:focus::-ms-value {
    background: transparent;
    color: #222;
  }
}

/* Firefox >= 2 */
/* Show only the native arrow */
body:last-child .dropdown::after, x:-moz-any-link     { display: none; }
/* reduce padding */
body:last-child .dropdown select, x:-moz-any-link     { padding-right: .8em; }

/* Firefox 7+ */
/* The specific FF selector used below successfully overrides the previous rule that turns off the custom icon; other FF hacky selectors we tried, like `*>.dropdown::after`, did not undo the previous rule */
/* Show only the custom icon */
_::-moz-progress-bar, body:last-child .dropdown:after { display: block; }
_::-moz-progress-bar, body:last-child .dropdown select {
  /* increase padding to make room for menu icon */
  padding-right: 1.9em;
  /* `window` is a Firefox way of hiding the arrow, sometimes works */
  -moz-appearance: window;
  text-indent: 0.01px;
  text-overflow: "";
}

/* Firefox 7+ focus style - This works around the issue that -moz-appearance: window  kills the normal select focus. Using semi-opaque because outline doesn't handle rounded corners */
_::-moz-progress-bar, body:last-child .dropdown select:focus { outline: 1px solid rgba(180,222,250, .7); }

/* Opera - Pre-Blink nix the custom arrow, go with a native select button */
x:-o-prefocus, .dropdown::after { display:none; }

/* Firefox focus has odd artifacts around the text, this kills that */
select:-moz-focusring     { color: transparent; text-shadow: 0 0 0 #000; }

option                    { font-weight:normal }