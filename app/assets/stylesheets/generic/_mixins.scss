/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**

/**
 * Position mixin
 */

$position-default:    null !default;

@mixin rposition($type, $top: $position-default, $right: $position-default,
                 $bottom: $position-default, $left: $position-default) {

  $allowed_types: 'absolute' 'relative' 'fixed';

  @if not index($allowed_types, $type) {
    @warn "Unknow position: #{$type}.";
  }

  position: $type;
  @each $data in top $top, right $right, bottom $bottom, left $left {
    // Because of null value to default, if a position argument (eg `$top`) is not set,
    // Sass does not output the property.
    // Thus, values like 12px, 23em, -4rem, inherit or initial are accepted.
    #{nth($data, 1)}: nth($data, 2);
  }
}

// Square
@mixin ssquare( $size:$base-font-size*2, $color: $white, $bgcolor: $brand-color,
                $fsize: $base-font-size, $bgchover: $brand-color){

  width: $size;
  height: $size;
  line-height: $size;
  font-size: $fsize;
  @extend %text--bold;
  @extend %text--center;
  color: $color;
  background-color: $bgcolor;

  &:hover       { background-color: $bgchover; }
}

@mixin centerer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin coverer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin word-wrap() {
  word-break:     break-word;
  -webkit-hyphens: auto;
  -moz-hyphens:    auto;
  hyphens:         auto;
}

@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@function black($opacity) { @return rgba(black, $opacity); }

@function white($opacity) { @return rgba(white, $opacity) }